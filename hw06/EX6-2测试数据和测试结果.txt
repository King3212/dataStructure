2.写出用邻接表作图（不带权图）的存储结构，分别实现广度优先遍历和深度优先遍历的程序。

情况1：只有一个节点
输入：
（1）图的结点总数，以输入 -1  来结束整个程序的运行。
    1
（2）分别输入每个结点的邻接点序号，以-1作结束
    -1
（3）输入遍历的出发点序号
    0
输出：
（1）广度优先遍历序列
    0
（2）深度优先遍历序列
    0
是否符合预期：
    是


情况2：有多个节点的无向图 且可完成遍历
输入：
（1）图的结点总数，以输入 -1  来结束整个程序的运行。
    5
（2）分别输入每个结点的邻接点序号，以-1作结束
    1 2 4 -1
    0 3 -1
    0 3 4 -1
    0 1 2 -1
    0 2 -1
（3）输入遍历的出发点序号
    0
输出：
（1）广度优先遍历序列
    0 1 2 4 3
（2）深度优先遍历序列
    0 1 3 2 4
是否符合预期：
    是


情况3：有多个节点的无向图 且不可完成遍历
输入：
（1）图的结点总数，以输入 -1  来结束整个程序的运行。
    5
（2）分别输入每个结点的邻接点序号，以-1作结束
    1 2 4 -1
    0 4 -1
    0 4 -1
    -1
    0 2 -1
（3）输入遍历的出发点序号
    0
输出：
（1）广度优先遍历序列
    0 1 2 4
（2）深度优先遍历序列
    0 1 4 2
是否符合预期：
    是


情况4：有多个节点的有向图 且可完成遍历
输入：
（1）图的结点总数，以输入 -1  来结束整个程序的运行。
    5
（2）分别输入每个结点的邻接点序号，以-1作结束
    1 3 -1
    2 3 -1
    0 -1
    4 -1
    -1
（3）输入遍历的出发点序号
    2
输出：
（1）广度优先遍历序列
    2 0 1 3 4
（2）深度优先遍历序列
    2 0 1 3 4
是否符合预期：
    是


情况5：有多个节点的有向图 且不可完成遍历
输入：
（1）图的结点总数，以输入 -1  来结束整个程序的运行。
    5
（2）分别输入每个结点的邻接点序号，以-1作结束
    1 3 -1
    2 3 -1
    0 -1
    4 -1
    -1
（3）输入遍历的出发点序号
    3
输出：
（1）广度优先遍历序列
    3 4
（2）深度优先遍历序列
    3 4
是否符合预期：
    是